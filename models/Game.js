// models/Game.js
import { DataTypes } from "sequelize";
import { sequelize } from "../db.js";
import { User } from "./User.js";
import { MainField } from "./MainField.js";
import { ExtraField } from "./ExtraField.js";

export const Game = sequelize.define("Game", {
    id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true,
    },
    player1Id: {
        type: DataTypes.INTEGER,
        allowNull: false,
    },
    player2Id: {
        type: DataTypes.INTEGER,
        allowNull: false,
    },
    currentTurnPlayerId: {
        type: DataTypes.INTEGER,
        allowNull: false,
        comment: "ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç —Ö–æ–¥ —Å–µ–π—á–∞—Å",
    },
    searchNumber: {
        type: DataTypes.INTEGER,
        allowNull: true,
        comment: "–ß–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏/—É–≥–∞–¥–∞—Ç—å/–¥–æ—Å—Ç–∏—á—å",
    },
    winnerId: {
        type: DataTypes.INTEGER,
        allowNull: true,
        comment: "ID –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (null, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞)",
    },
    isDraw: {
        type: DataTypes.BOOLEAN,
        allowNull: true,
    },
    status: {
        type: DataTypes.ENUM("accept", "active", "finished", "cancelled"),
        allowNull: false,
        defaultValue: "accept",
    },

    // ‚úÖ –ù–æ–≤–æ–µ –ø–æ–ª–µ ‚Äî –º–∞—Å—Å–∏–≤ ID –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∂–∞–ª–∏ "–ì–æ—Ç–æ–≤"
    readyPlayers: {
        type: DataTypes.JSONB,
        allowNull: false,
        defaultValue: [],
        comment: "–°–ø–∏—Å–æ–∫ ID –∏–≥—Ä–æ–∫–æ–≤, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É",
    },
    repeatGamePlayers: {
        type: DataTypes.JSONB,
        allowNull: false,
        defaultValue: [],
        comment: "–°–ø–∏—Å–æ–∫ ID –∏–≥—Ä–æ–∫–æ–≤, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–≥—Ä—É",
    },

    mainFieldWidth: {
        type: DataTypes.INTEGER,
        allowNull: false,
        defaultValue: 45,
        comment: "–®–∏—Ä–∏–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—è",
    },
    mainFieldHeight: {
        type: DataTypes.INTEGER,
        allowNull: false,
        defaultValue: 35,
        comment: "–í—ã—Å–æ—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—è",
    },
    extraFieldWidth: {
        type: DataTypes.INTEGER,
        allowNull: false,
        defaultValue: 20,
        comment: "–®–∏—Ä–∏–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è",
    },
    extraFieldHeight: {
        type: DataTypes.INTEGER,
        allowNull: false,
        defaultValue: 20,
        comment: "–í—ã—Å–æ—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è",
    },
    numberRange: {
        type: DataTypes.INTEGER,
        allowNull: false,
        defaultValue: 100,
        comment: "–ö–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–∏—Å–µ–ª",
    },
    isShowLoseLeft: {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        defaultValue: true,
    },
    createdAt: {
        type: DataTypes.DATE,
        allowNull: false,
        defaultValue: DataTypes.NOW,
    },
    turnDeadline: {
        type: DataTypes.DATE,
        allowNull: true,
        comment: "–í—Ä–µ–º—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ (20 —Å–µ–∫—É–Ω–¥ –ª–∏–º–∏—Ç)",
    },
});

// üîó –°–≤—è–∑–∏
User.hasMany(Game, { foreignKey: "player1Id", as: "gamesAsPlayer1" });
User.hasMany(Game, { foreignKey: "player2Id", as: "gamesAsPlayer2" });
Game.belongsTo(User, { foreignKey: "player1Id", as: "player1" });
Game.belongsTo(User, { foreignKey: "player2Id", as: "player2" });
Game.belongsTo(User, { foreignKey: "winnerId", as: "winner" });

Game.hasMany(MainField, { foreignKey: "gameId", as: "mainFields" });
Game.hasMany(ExtraField, { foreignKey: "gameId", as: "extraFields" });

User.hasMany(MainField, { foreignKey: "ownerId", as: "mainFields" });
User.hasMany(ExtraField, { foreignKey: "ownerId", as: "extraFields" });

MainField.belongsTo(Game, { foreignKey: "gameId" });
ExtraField.belongsTo(Game, { foreignKey: "gameId" });
MainField.belongsTo(User, { foreignKey: "ownerId" });
ExtraField.belongsTo(User, { foreignKey: "ownerId" });
